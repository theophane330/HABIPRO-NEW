//proprieteService.js
// Configuration de l'API
const API_BASE_URL = 'http://localhost:8000/api';
const API_URL = `${API_BASE_URL}/proprietes/`;

/**
 * Service pour g√©rer les propri√©t√©s immobili√®res
 */
const proprieteService = {
  /**
   * R√©cup√©rer toutes les propri√©t√©s
   */
  async obtenirToutesProprietes() {
    try {
      const response = await fetch(API_URL, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Propri√©t√©s r√©cup√©r√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des propri√©t√©s:', error);
      throw error;
    }
  },

  /**
   * Rechercher des propri√©t√©s avec filtres
   * @param {string} searchTerm - Terme de recherche
   * @param {string} statusFilter - Filtre par statut
   */
  async rechercherProprietes(searchTerm = '', statusFilter = 'all') {
    try {
      let url = API_URL;
      const params = new URLSearchParams();

      if (searchTerm) {
        params.append('search', searchTerm);
      }

      if (statusFilter && statusFilter !== 'all') {
        params.append('statut', statusFilter);
      }

      if (params.toString()) {
        url += `?${params.toString()}`;
      }

      console.log('üîç Recherche avec URL:', url);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ R√©sultats de recherche:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la recherche:', error);
      throw error;
    }
  },

  /**
   * Obtenir une propri√©t√© par son ID
   * @param {number} id - ID de la propri√©t√©
   */
  async obtenirPropriete(id) {
    try {
      const response = await fetch(`${API_URL}${id}/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Propri√©t√© r√©cup√©r√©e:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration de la propri√©t√©:', error);
      throw error;
    }
  },

  /**
   * Cr√©er une nouvelle propri√©t√©
   * @param {Object} proprieteData - Donn√©es de la propri√©t√©
   */
  async creerPropriete(proprieteData) {
    try {
      console.log('üì§ Envoi des donn√©es:', proprieteData);

      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(proprieteData)
      });

      // Lire la r√©ponse
      const responseData = await response.json();
      console.log('üì• R√©ponse re√ßue:', responseData);

      if (!response.ok) {
        console.error('‚ùå Erreur serveur:', responseData);
        throw new Error(
          responseData.error || 
          responseData.message || 
          JSON.stringify(responseData.validation_errors) ||
          'Erreur lors de la cr√©ation de la propri√©t√©'
        );
      }

      console.log('‚úÖ Propri√©t√© cr√©√©e avec succ√®s:', responseData);
      return responseData;
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation:', error);
      throw error;
    }
  },

  /**
   * Modifier une propri√©t√© existante
   * @param {number} id - ID de la propri√©t√©
   * @param {Object} proprieteData - Nouvelles donn√©es
   */
  async modifierPropriete(id, proprieteData) {
    try {
      console.log('üìù Modification de la propri√©t√©', id, ':', proprieteData);

      const response = await fetch(`${API_URL}${id}/`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(proprieteData)
      });

      const responseData = await response.json();
      console.log('üì• R√©ponse modification:', responseData);

      if (!response.ok) {
        console.error('‚ùå Erreur modification:', responseData);
        throw new Error(
          responseData.error || 
          'Erreur lors de la modification de la propri√©t√©'
        );
      }

      console.log('‚úÖ Propri√©t√© modifi√©e avec succ√®s');
      return responseData;
    } catch (error) {
      console.error('‚ùå Erreur lors de la modification:', error);
      throw error;
    }
  },

  /**
   * Modifier partiellement une propri√©t√©
   * @param {number} id - ID de la propri√©t√©
   * @param {Object} proprieteData - Donn√©es √† modifier
   */
  async modifierPartiellement(id, proprieteData) {
    try {
      console.log('üìù Modification partielle de la propri√©t√©', id);

      const response = await fetch(`${API_URL}${id}/`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(proprieteData)
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(
          responseData.error || 
          'Erreur lors de la modification partielle'
        );
      }

      console.log('‚úÖ Modification partielle r√©ussie');
      return responseData;
    } catch (error) {
      console.error('‚ùå Erreur modification partielle:', error);
      throw error;
    }
  },

  /**
   * Supprimer une propri√©t√©
   * @param {number} id - ID de la propri√©t√©
   */
  async supprimerPropriete(id) {
    try {
      console.log('üóëÔ∏è Suppression de la propri√©t√©', id);

      const response = await fetch(`${API_URL}${id}/`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(
          errorData.error || 
          'Erreur lors de la suppression de la propri√©t√©'
        );
      }

      console.log('‚úÖ Propri√©t√© supprim√©e avec succ√®s');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression:', error);
      throw error;
    }
  },

  /**
   * Obtenir les statistiques des propri√©t√©s
   */
  async obtenirStatistiques() {
    try {
      const response = await fetch(`${API_URL}statistiques/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Statistiques r√©cup√©r√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error);
      // Retourner des statistiques par d√©faut en cas d'erreur
      return {
        total_proprietes: 0,
        proprietes_louees: 0,
        proprietes_disponibles: 0,
        proprietes_en_vente: 0,
        revenus_mensuels: 0
      };
    }
  },

  /**
   * Exporter les donn√©es des propri√©t√©s
   */
  async exporterDonnees() {
    try {
      console.log('üìä Export des donn√©es...');

      const response = await fetch(`${API_URL}export/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Donn√©es export√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'export:', error);
      throw error;
    }
  },

  /**
   * Changer le statut d'une propri√©t√©
   * @param {number} id - ID de la propri√©t√©
   * @param {string} nouveauStatut - Nouveau statut (disponible, lou√©, en_vente)
   */
  async changerStatut(id, nouveauStatut) {
    try {
      console.log(`üîÑ Changement de statut de la propri√©t√© ${id} vers ${nouveauStatut}`);

      const response = await fetch(`${API_URL}${id}/changer_statut/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ statut: nouveauStatut })
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(
          responseData.erreur || 
          'Erreur lors du changement de statut'
        );
      }

      console.log('‚úÖ Statut chang√© avec succ√®s');
      return responseData;
    } catch (error) {
      console.error('‚ùå Erreur changement de statut:', error);
      throw error;
    }
  },

  /**
   * Filtrer les propri√©t√©s par statut
   * @param {string} statut - Statut √† filtrer (disponible, lou√©, en_vente, all)
   */
  async filtrerParStatut(statut) {
    try {
      const url = statut === 'all' 
        ? API_URL 
        : `${API_URL}?statut=${statut}`;

      console.log('üîç Filtrage par statut:', statut);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Propri√©t√©s filtr√©es:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Erreur lors du filtrage:', error);
      throw error;
    }
  }
};

export default proprieteService;